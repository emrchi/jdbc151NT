JDBC (Java Database Connectivity)
Olusturdugumuz datayi SQL kullanarak bir database’e kaydettik.
DDL (Create, Alter, Drop, Rename, Truncate, Comment)à Data oncesi asama. Bu bizim data definition language’imizdir.
Data definition language ile tanimlama yapiyoruz.
DML (Insert, Delete, Update,Merge, Call, Explain Plan, Lock Table) Data Manipulation Language
Bu gercek datalar uzerinde calisan bir dildir.
DQL (Grant, Revoke, Invoke) Data islemleri yapilir ve bu kisim daha ziyade developer ile ilgilidir.
DQL (Select) data kaydi duzgun bir sekilde yapiliyor mu, kayit fonksiyonu calisiyor mu diye QA ler olarak database’i
test edecegiz. Burada bir degisiklik yapilmiyor, sadece bir cagirma soz konusu.
JDBC (Java Database Connectivity)
Biz pgAdminde her ne is yapiyorsak ornegin select * from countries
Where country_id=’BR’ islemini hic pgAdmin’e ugramadan bir connection ile intellij’de yapabiliriz.
Biz testlerimizi intellij’de yapabiliriz. Hem database hem API hem de  UI testi yapmaya end to end test denir.
JDBC veri merkezine baglanma, query ve update yapmamiza, veriyi islememize yardim eder.
Database’e baglanmak icin getConnetion() ile baglanabiliriz.
Peki biz hangi database’e baglanacagiz.
Connection con=DriveManager.getConnection(“jdbc:hostname:databaseName”, username, password);
Query gonderme islemi icin SQL kodlari ile query yapilir.
Statement stmt=con.createStatement();
Intellij’I actik ve file’dan new project actik. Projemizin adini verip create ettikten ve acilan pencereden this
windows’i sectikten sonra  sonra pom.xml kismina geldik ve actigimizda son properties yazan kod kisminin hemen ustune
asagidaki kodumuzu yapistirdik.
<dependencies>
 <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
   <dependency>
       <groupId>org.postgresql</groupId>
       <artifactId>postgresql</artifactId>
       <version>42.5.0</version>
   </dependency>
</dependencies>
Kodumuzda kirmizilik olunca sagi tiklayip maven uzerinden Reload project’I tiklayinca yapilan yukleme ile kirmizilik gitti.
Daha sonra src yani kodlari yazacagimiz yere gelip tiklayinca altinda main ve test bolumleri goruldu.
Main kisminda bir application yapacagiz.
Main’i actik ve orada java ile resources bolumleri goruldu. Java uzerine gelerek ilk classimizi actik.
Main methodumuzu actiktan sonra,
BIRINCI ADIM: Driver’a kaydol.
Class.forName("org.postgresql.Driver"); //Bu kisim intellij’de external libraries altinda org kismindan Driver yolunu gosteriyor.
 JDBC sonrasi buna artik gerek kalmiyor
forName kismi kizarinca uzerine geldik bize bir exception firlatmamiz istediginden uyarinin en ust kisminda add exception’a
tiklayinca kizariklik gitti ve main method yanina exception firlatilmis oldu.

IKINCI ADIM: Database’e baglan. DriverManager class’ina giderek getConnection() ile baglaniriz. Biz bunu 3 parametre ile
url, user ve password ile calisturacagiz. getConnection kismi kizaracak ve biz buraya gelip exeption atilmasini saglariz.
DriverManager.getConnection("", "",""); Biz parantez icine “” atinca sirasiyla… user ve password yazilarini gorduk yani
bu kisimlara ornegin user, passwordumuzu girecegiz. Biz parametreleri koymazsak, bu kisim calismaz.
getConnection() static’tir. Cunku class ismi ile cagiriyoruz.
Connection connection = DriverManager.getConnection(jdbc:postgresql://localhost:5432/postgres", "postgres","1234")
//Bu kodumuzu Connection connection’a assign ettik.
("jdbc:postgresql://localhost:5432/postgres",
"postgres","1234"); bu kismi DriverManager.getConnection parantezi icine aldik jdbc:postgresql:// kismi sabittir.
Geri kalan kisim pgAdmin’de PostGreSQL 15 kisminda properties ve sonrasi connection kismindan check edip yazacagimiz bilgiler.
Localhost kismi connection kisminda Host name/ address’de yazili. 5432 ise connection’da Port bolumunde var. birinci postgres
Maintaince database ve ikinci postgres username kisminda yazili. Password olarak pgAdmin’I acarken kullandigimiz password’u girecegiz.
Yani parantez icinde en son kisma gelecek.
Postgres bilgisini pgAdmin PostGreSQL 15 kismina gelip sagi tiklayip properties kismina gelince Acilan pencerede
Connection’a geldik ve sirasiyla localhost, 5432 postgres ve username postgres goruldu. Username’e postgresi kopyalayip yapistirdik.
Son kisimda bizim pgAdmin’deki paswordumuzu yaziyoruz.

UCUNCU ADIM:
Statement olustur. Statement bizim icin b rara adimdir.
Statement statement = connection.createStatement(); //Burada sadece bir statement olusturuyoruz. Bir islem yapmiyoruz.
Islemi dorduncu adimda yapacagiz.
DORDUNCU ADIM: Query calistir.
Burada islemlerimizi yapiyoruz.
statement.execute(“”);
pgAdmin’e giderek databases altinda postgres uzerine gelip yeni bir query actik.
--1.Ornek: Workers adinda bir table olustur ve "worker_id, worker_name, worker_salary"
--sutunlarini ekleyin
CREATE TABLE workers (
worker_id VARCHAR(20),
worker_name VARCHAR(20),
worker_salary INT
)
Biz bu kodu pgAdmin yerine intellij’de yapacagiz. End to end test olarak bilinen test, UI, API ve database testlerini yapmamiz
halinde soz konusu olur. Bu testleri intellij’de yapacagiz.
 Biz ayni kodu intellij’de statement.execute() parantezi icine ekleyip run edince hata Verdi. Workers table’inin zaten
 oldugunu yazdi. Workers is already exist.
Bunun uzerine pgAdmin’de workers table’i table ism uzerine gelip drop ile sildi. Silme islemi gerceklesmez ise,
statement.execute("DROP TABLE workers"); kodu ile workers table’I intellij’de silebiliriz.
 intellij icerisinde statement.execute() methodunu kullanarak silinen workers table’imizi olusturduk. Bu kod ile intellij’de
 sadece bu table’I olusturduk. Biz bu kod ile data cagiramayiz. Data Definition Language ile datalari cagiramiyoruz.
 Datayi DQL(select) ile cagirabiliriz.
Biz statement.execute(“CREATE TABLE workers (worker_id
VARCHAR(20),worker_name VARCHAR(20),worker_salary INT”); String sql1 variable’ina assign ettik.
String sql1=statement.execute(“CREATE TABLE workers (worker_id VARCHAR(20),worker_name VARCHAR(20),worker_salary INT”);
Boolean r1=statement.execute(sql1);
       1) Eğer execute() methodu DDL (create, drop, alter table) ile kullanılırsa her zaman 'false' döner.
       2) Eğer execute() methodu DQL (select) ile kullanılırsa data dönerse 'true', data dönmezse 'false' döner.
System.out.println(“r1= “ +r1);//false return etti.
       //2. Örnek: workers table'ına worker_address sütunu ekleyiniz
pgAdmin query’de sunlari yazdik ve kodu calistirdik.
ALTER TABLE workers ADD worker_address VARCHAR(100)
SELECT * FROM workers
Bu kod ile table’a worker_address isimli sutunun eklendigini gorduk. Daha sonra intellij’e gidecegimiz icin
workers table’I drop ile sildik.
Intellij’deki class’imiza geldik. pgAdmin’da yazdigimiz kodu String sqlQuery isimli variable’a assign ettik.
Yeni bir sutun ismi olusturulacagindan String olarak variable’in data turunu sectik. Daha sonra sqlQuery1 isimli String
variable’I statement.excecute() parantezi icerisine koyduk ve Boolean sql2 isimli bir variable’a assign ettik.
Cunku statement.execute() method ile ya true ya da false sonucunu alacagiz.
       String sqlQuery1 = "ALTER TABLE workers ADD worker_address VARCHAR(100);";
       boolean sql2 = statement.execute(sqlQuery1);
       System.out.println("sql2 = " + sql2);
--3. Ornek: workers table'ini silin.
Bunun icin pgAdmin’e geldik ve orada onceden sildigimiz halde intellij’deki kod nedeniyle workers table’in oldugunu gorduk
ve bu table’I asagidaki kod ile sildik.
DROB TABLE workers
SELECT * FROM workers
Tekrar intellij’e giderek pgAdmin’de yazdigimiz DROB TABLE workers kodunu sql3 isimli String bir variable’a assign ettik.
String olan sql3’u statement.execute() parantezi icine alip bir boolean variable’a assign edip table’i sildik ve sout ile
table’in silinip silinmedigine baktik.
       //3. Örnek: worker table'ı siliniz
       String sqlQuery2 = "DROP TABLE workers";
       boolean sql3 = statement.execute(sqlQuery2);
       System.out.println("sql3 = " + sql3);
       //5. Adım: Bağlantıyı kapat
       connection.close();
       statement.close();

Daha sonra intellij’de yeni bir class daha actik.
Ilk classimizda data definition language kullandik. Bu class’da data Query Language’i kullanacagiz.
pgAdmin’e giderek countries isimli bir table olusturduk.
 //1. Örnek: region id'si 1 olan "country name" değerlerini çağırın.
SELECT country_name FROM countries WHERE region_id =1 (countries tablonun country_name sutunundan region_id’si 1 olan ulkeleri cagir)
Bundan sonra tekrar intellij class’imiza geldik ve connection ile statement methodlarini onceden oldugu gibi yazmaliyiz.
Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "pgAdmin passwordumuz olacak");
Statement statement = connection.createStatement();
String sql1 = "SELECT country_name FROM countries WHERE region_id = 1";
boolean r1 = statement.execute(sql1);
System.out.println("r1 = " + r1);//bu defa true return etti, cunku biz execute() ile bir data cagiriyoruz.
Satırları görmek için executeQuery methodunu kullanmalıyız. execute() methodu sadece true veya false döner.
ResultSet resultSet = statement.executeQuery(sql1);//bu execute ile gelen datayi resultSet icerisine koyacagiz.
Gelecek datalarimiz:
country_name sutunu icinde://resultSet’deki pointer basligi yani country_name’I gosterir. Pointer en tepede olur ve
next() method ile pointer  “Belgium”’a gelir. Bu bize bir String verir. Next() method ile bir sonraki yerde data varsa
true doner ve tekrar eden next ile pointer bir sonraki dataya “Switzerland” a gider. Next() sonrasinda Biz getString()
method ile datayi aliriz. next method ile pointer’in oldugu yerdeki datayi ornegin “Belgium”’i bize verir. getString
parantezi icerisine ilgili sutun ismini yazarak o sutundaki pointer’in oldugu yerdeki datayi aliriz.
“Belgium””
“Switzerland””
“Germany”
“Denmark”
…
…
 while (resultSet.next()){ //resultSet’in siradaki satiri oldugu surece calis dedigimiz icin sutundaki datalar bitinceye
 kadar next method calisacak.
 System.out.println(resultSet.getString("country_name"));

